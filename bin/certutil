#!/usr/bin/env ruby

require 'optparse'
require 'methadone'
require 'certutil.rb'

class App
  include Methadone::Main
  include Methadone::CLILogging

  main do |source| # Add args you want: |like,so|
    # your program code here
    # You can access CLI options via
    # the options Hash

    debug "from bin, wd is #{Dir.pwd}"

    @cp = CertificateParser.new_from_input(source)
    #if options["input"]
      #@cp = CertificateParser.new_from_file(File.expand_path(options["input"]))
    #elsif options["hostname"]
      #@cp = CertificateParser.new_from_hostname(options["hostname"])
    #else
      #error "You must include a cert file with -i or a hostname with -h."
    #end

    if @cp.certs.count == 0
      error "!! Couldn't find any valid certificates. Make sure your input contains -----BEGIN CERTIFICATE----- and -----END CERTIFICATE----- blocks."
    elsif @cp.certs.count == 1
      info "Found 1 certificate."
    else
      info "Found #{@cp.certs.count} certificates."
    end

    if options[:split]
      @cp.write_crt_files! if options[:output] == "crt"
      @cp.write_txt_files! if options[:output] == "txt"
    else
      @cp.write_crt_file! if options[:output] == "crt"
      @cp.write_txt_file! if options[:output] == "txt"
    end

    info @cp.decoded.join("\n-----\n\n") unless options[:mute]
  end

  # supplemental methods here

  # Declare command-line interface here

  # description "one line description of your app"
  #
  # Accept flags via:
  # on("--flag VAL","Some flag")
  #on("--input FILE", "-i FILE", "Input .crt/.pem file")
  #on("--hostname HOSTNAME", "-h HOSTNAME", "Hostname from which to fetch certificate")
  on("--output FORMAT", "-o", "Write out results to the current directory (formats are crt or txt (decoded)")
  on("--split", "-s", "Split multiple certs into separate files for writing")
  on("--mute", "-m", "Mute output")

  # options[flag] will contain VAL
  #
  # Specify switches via:
  # on("--[no-]switch","Some switch")
  arg :source, "The cert(s) on which to operate (filename, hostname or gist link)"

  #
  # Or, just call OptionParser methods on opts
  #
  # Require an argument
  # arg :some_arg
  #
  # # Make an argument optional
  # arg :optional_arg, :optional

  version Certutil::VERSION

  use_log_level_option

  go!
end
